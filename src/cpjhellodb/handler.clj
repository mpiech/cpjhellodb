(ns cpjhellodb.handler
  (:require
   [compojure.core :as cpj]
   [compojure.route :as cpjroute]
   [ring.middleware.defaults :as ring]
   [net.cgrand.enlive-html :as enlive]
   [clj-time.core :as time]
   [clj-time.format :as ftime]
   [clj-time.coerce :as ctime]
   [clojure.java.jdbc :as jdbc]
   [clojure.data.json :as json]
   [monger.core :as mg]
   [monger.credentials :as mcr]
   [monger.collection :as mc]
   [monger.operators :refer :all]
   ))

;;;
;;; Database connection objects
;;;

;;; MySQL database specs for local and OpenShift

(def dbspec
  (if-let [host (System/getenv "MYSQL_55_RHEL7_SERVICE_HOST")]
    {:subprotocol "mysql"
     :subname (str
               "//"
               host
               ":"
               (System/getenv "MYSQL_55_RHEL7_SERVICE_PORT")
               "/testendpoint")
     :user "testusr"
     :password "testpwd"
     }
    (if-let [host (System/getenv "MYSQL_SERVICE_HOST")]
      {:subprotocol "mysql"
       :subname (str
                 "//"
                 host
                 ":"
                 (System/getenv "MYSQL_SERVICE_PORT")
                 "/testendpoint")
       :user "testusr"
       :password "testpwd"
       }
      {:subprotocol "mysql"
       :subname "//localhost:3306/testendpoint"
       :user "testusr"
       :password "testpwd"
       }
      )))

;;; Mongo database objects

;(def mgconn 
;  (if-let [host (System/getenv "MONGODB_26_RHEL7_SERVICE_HOST")]
;    (let [port (Integer/parseInt
;                (System/getenv
;                 "MONGODB_26_RHEL7_SERVICE_PORT"))
;          uname "testusr"
;          dbname "tracks"
;          pwd-raw "testpwd"
;          pwd (.toCharArray pwd-raw)
;          creds (mcr/create uname dbname pwd)]
;      (mg/connect-with-credentials host port creds))
;    (if-let [host (System/getenv "MONGODB_SERVICE_HOST")]
;      (let [port (Integer/parseInt
;                  (System/getenv
;                   "MONGODB_SERVICE_PORT"))
;            uname "testusr"
;            dbname "tracks"
;            pwd-raw "testpwd"
;            pwd (.toCharArray pwd-raw)
;            creds (mcr/create uname dbname pwd)]
;        (mg/connect-with-credentials host port creds))
;      (mg/connect)
;      )))

(def mgdb (mg/get-db mgconn "testdb"))

;;; 
;;; Compojure Routing
;;;

(cpj/defroutes app-routes
  (cpj/HEAD "/" [] "")
  (cpj/GET "/" []
    (handler-get-index))
  (cpjroute/files "/")
  (cpjroute/resources "/")
  (cpjroute/not-found "Not Found")
  )

;; start nREPL server

(defonce server (nrepl/start-server :port 7888))

;; generated by 'lein ring new'

(def app
  (ring/wrap-defaults app-routes ring/site-defaults)
  )

;;; EOF
